[{ "prompt": "import moment from 'moment'\nexport const tableUtcToLocal = (time, format = 'HH:mm:ss') => {\n  if (time === '-') return '-'\n  const res = moment(moment.utc(time, format).toDate())\n    .local()\n    .format(format)\n  return res === 'Invalid date' || res === 'Fecha inválida' ? '-' : res\n}\nexport const utcToLocal = time => {\n  if (time === '-') return '-'\n  const res = moment(moment.utc(time, 'HH:mm:ss').toDate())\n    .local()\n    .format('HH:mm:ss')\n  return res === 'Invalid date' ? '-' : res\n}", "completion": "import moment from 'moment'\n// Esta función convierte una hora en formato UTC a formato local\n// Recibe como parámetro la hora en formato UTC y el formato en el que se desea mostrar (opcional)\n// Devuelve la hora en formato local\nexport const tableUtcToLocal = (time, format = 'HH:mm:ss') => {\n  // Si la hora es igual a '-', se devuelve '-'\n  if (time === '-') return '-'\n  // Se convierte la hora en formato UTC a un objeto de tipo Date en formato local\n  // Luego se formatea de acuerdo al formato especificado\n  const res = moment(moment.utc(time, format).toDate())\n    .local()\n    .format(format)\n  // Si el resultado es 'Fecha inválida' o 'Invalid date', se devuelve '-'\n  // En otro caso se devuelve el resultado formateado\n  return res === 'Invalid date' || res === 'Fecha inválida' ? '-' : res\n}\n// Esta función convierte una hora en formato UTC a formato local\n// Recibe como parámetro la hora en formato UTC\n// Devuelve la hora en formato local\nexport const utcToLocal = time => {\n  // Si la hora es igual a '-', se devuelve '-'\n  if (time === '-') return '-'\n  // Se convierte la hora en formato UTC a un objeto de tipo Date en formato local\n  // Luego se formatea en formato 'HH:mm:ss'\n  const res = moment(moment.utc(time, 'HH:mm:ss').toDate())\n    .local()\n    .format('HH:mm:ss')\n  // Si el resultado es 'Invalid date', se devuelve '-'\n  // En otro caso se devuelve el resultado formateado\n  return res === 'Invalid date' ? '-' : res\n}\n" }]